import rospy
import numpy as np
import cv2
from cv_bridge import CvBridge
from sensor_msgs.msg import Image, CompressedImage
from geometry_msgs.msg import Twist

class Follower:
  def __init__(self):
    self.bridge = cv_bridge.CvBridge()
    self.image_sub = rospy.Subscriber("/rospicam_node/Image/compressed",compressedImage, self.image_callback, queue_size=1)
    self.cmd_vel_pub = rospy.Publisher('cmd_vel',Twist, queue_size=1)
    self.twist = Twist()
  def image_callback(self, msg):
    np_arr=np.fromstring(msg.data,np.uint8)
    image=cv2.imdecode(np_arr,cv2.IMREAD_COLOR)
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    colorLow=np.array([165,80,50])
    colorHigh=np.array([180,255,255])
    kernalOpen=np.ones((7,7))
    kernalClose=np.ones((15,15))
    mask1 = cv2.inRange(hsv, colorLow, colorHigh)
    mask = cv2.morphologyEx(mask1, cv2.MORPH_CLOSE,kernalClose)
    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernalOpen)
    result = cv2.bitwise_and(image, image, mask = mask)
    cv2.imshow('colorTest', result)
    h, w, d = image.shape
    search_top = 3*h/4
    search_bot = 3*h/4 + 20
    mask[0:search_top, 0:w] = 0
    mask[search_bot:h, 0:w] = 0
    M = cv2.moments(mask)
    if M['m00'] > 0:
      cx = int(M['m10']/M['m00'])
      cy = int(M['m01']/M['m00'])
      cv2.circle(image, (cx, cy), 20, (0,0,255), -1)
     
      err = cx - w/2
      self.twist.linear.x = 0.2
      self.twist.angular.z = -float(err) / 100
      self.cmd_vel_pub.publish(self.twist)
      
    cv2.imshow("window", image)
    cv2.waitKey(3)
  def main(self)
    rospy.init_node('follower', anonymous = TRUE)
    follower = Follower()
    try:
       rospy.spin()
    except KeyboardInterrupt:
       print("Shutting down")
    cv2.destroyAllWindows()
  
  if __name__ == '__main__':
     main()
